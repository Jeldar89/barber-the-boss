---
import "react-big-calendar/lib/css/react-big-calendar.css";
import Layout from "@/layouts/Layout.astro";
import Container from "@/components/Container.astro";
import type { IBarber } from "@/types/Barbers.ts";
import type { IEvent } from "@/types/Event.ts";
import ContainerCalendar from "@/components/ContainerCalendar.tsx";
import type { IService } from "@/types/Services.ts";
import { app } from "@/firebase/server";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";

const auth = getAuth(app);
const db = getFirestore(app);

/* Check current session */
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/auth/signin");
}

const sessionCookie = Astro.cookies.get("__session")?.value as string;
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
  return Astro.redirect("/auth/signin");
}

// const response = await fetch(`${import.meta.env.API_URL}/barber.json`);
// const barbers = await response.json();
const barbersCollection = db.collection("barbers");
const barbersSnapshot = await barbersCollection.get();
const barbers = barbersSnapshot.docs.map((doc) => {
  const data = doc.data();
  return {
    id: doc.id,
    ...data,
  };
}) as IBarber[];
const pages = barbers.map((barber: IBarber) => ({
  id: barber.id,
}));

// const respondeEvents = await fetch(`${import.meta.env.API_URL}/events.json`);
// const events = await respondeEvents.json();

// const responseServices = await fetch(
//   `${import.meta.env.API_URL}/services.json`
// );
// const servicesList = await responseServices.json();
const servicesCollection = db.collection("services");
const servicesSnapshot = await servicesCollection.get();
const servicesList = servicesSnapshot.docs.map((doc) => {
  const data = doc.data();
  return {
    id: doc.id,
    ...data,
  };
}) as IService[];

const eventCollection = db.collection("events");
const eventSnapshot = await eventCollection.get();
const events = eventSnapshot.docs.map((doc) => {
  const data = doc.data();
  return {
    id: doc.id,
    ...data,
  };
}) as IEvent[];

const { service, barber } = Astro.params;

const serviceSelected = servicesList.find(
  (s: IService) => s.id === service || parseInt(service || "")
);
const eventsByBarber = events.filter(
  (event: IEvent) => event.barber?.id === barber || parseInt(barber || "")
);

const listEvents = eventsByBarber.map((event: IEvent) => ({
  id: event.id,
  title: event.title,
  start: new Date(event.start),
  end: new Date(event.end),
  allDay: event.allDay,
  resource: event.resource,
}));
//console.log(events)
const page = pages.find((page: any) => page.id === barber);
page;
---

<Layout title="The boss - Barber">
  <Container>
    <ContainerCalendar
      client:load
      events={listEvents}
      services={serviceSelected}
      barber={barber || parseInt(barber || "0")}
      user={user}
    />
  </Container>
</Layout>
